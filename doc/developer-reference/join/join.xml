<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE chapter [
	<!ENTITY % extensions SYSTEM "../../stylesheets/macros.ent" >
	<!ENTITY % DocBookDTD PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
	"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
	<!ENTITY % entities SYSTEM "../../stylesheets/macros-en.ent" >
	%extensions;
	%DocBookDTD;
	%entities;
]>
<chapter id="chap:join">
	<title>Domain Join
		<indexterm><primary>Domain join</primary></indexterm>
		<indexterm><primary>Join</primary><see>Domain join</see></indexterm>
	</title>
	<para>
		An <acronym>UCS</acronym> system is normally joined into a domain.
		This establishes a trust relation between the different hosts, which enables users to access services provided by any host of the domain.
	</para>
	<para>
		Joining a system into a domain requires write permission to create and modify entries in the Univention directory service (<acronym>LDAP</acronym>).
		Local <literal>root</literal> permission on the joining host is not sufficient to get write access to the domain wide <acronym>LDAP</acronym> service.
		Instead valid <acronym>LDAP</acronym> credentials must be entered interactively by the administrator doing the join.
	</para>

	<section id="chap:scripts">
		<title>Join scripts
			<indexterm><primary>Domain join</primary><secondary>Join script</secondary><see>Join script</see></indexterm>
		</title>
		<para>
			Packages requiring write access to the Univention directory service can provide so called <firstterm>join scripts</firstterm>.
			They are installed into <filename class="directory">/usr/lib/univention-install/</filename>.
			The name of each join script is normally derived from the name of the binary package containing it.
			It is prefixed with a two-digit number, which is used to order the scripts lexicographically.
			The filename either ends in <filename class="extension">.inst</filename> or <filename class="extension">.uinst</filename>, which distinguishes between join script and unjoin script (see <xref linkend="join:unjoin"/>).
			The file must have the executable permission bits set.
		</para>
	</section>

	<section id="join:status">
		<title>Join status
			<indexterm><primary>Domain join</primary><secondary>Join status</secondary></indexterm>
		</title>
		<para>
			For each join script a version number is tracked.
			This is used to skip re-executing join scripts, which already have been executed.
			This is mostly a performance optimization, but is also used to find join scripts which need to be run.
		</para>
		<para>
			The text file <filename>/var/univention-join/status</filename> is used to keep track of the state of all join scripts.
			For each successful run of a join script a line is appended to that file.
			That record consists of three space separated entries:
		</para>
		<programlisting>$script_name v$version successful</programlisting>
		<orderedlist>
			<listitem>
				<simpara>
					The first entry contains the name of the join script without the two-digit prefix and without the <filename>.inst</filename> suffix, usually corresponding to the package name.
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					The second entry contains a version number prefixed by a <literal>v</literal>.
					It is used to keep track of the latest version of the join script, which has been run successfully.
					This is used to identify, which join scripts need to be executed and which can be skipped, because they were already executed in the past.
				</simpara>
			</listitem>
			<listitem>
				<simpara>
					The third column contains the word <wordasword>successful</wordasword>.
				</simpara>
			</listitem>
		</orderedlist>
		<para>
			If a new version of the join script is invoked, it just appends a new record with a higher version number at the end of the file.
		</para>
	</section>

	<section id="join:run">
		<title>Running join scripts
			<indexterm><primary>Domain join</primary><secondary>Running</secondary></indexterm>
		</title>
		<para>
			There exist three commands related to running join scripts:
		</para>
		<variablelist>
			<varlistentry>
				<term><command>univention-join</command></term>
				<listitem>
					<para>
						When <command>univention-join</command> is invoked, a machine account is created.
						The <firstterm>distinguished name</firstterm> (<abbrev>dn</abbrev>) of that entry is stored locally in the &ucsUCRV; <envar>ldap/hostdn</envar>.
						A random password is generated, which is stored in the file <filename>/etc/machine.secret</filename>.
					</para>
					<para>
						After that the file <filename>/var/univention-join/status</filename> is cleared and all join scripts located in <filename class="directory">/usr/lib/univention-install/</filename> are executed in lexicographical order.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><command>univention-run-join-scripts</command></term>
				<listitem>
					<para>
						This command is similar to <command>univention-join</command>, but skips the first step of creating a machine account.
						Only those join scripts are executed, whose current version is not yet registered in <filename>/var/univention-join/status</filename>.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><command>univention-check-join-status</command></term>
				<listitem>
					<para>
						This command only checks for join scripts in <filename>/usr/lib/univention-install/</filename>, whose version is not yet registered in <filename>/var/univention-join/status</filename>.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
		<para>
			When packages are installed, it depends on the server role, if join scripts are invoked automatically from the <literal>postinst</literal> Debian maintainer script or not.
			This only happens on master and &ucsBackup; system roles, where the local <literal>root</literal> user has access to the file containing the <acronym>LDAP</acronym> credentials.
			On all other system roles the join scripts need to be run manually by invoking <command>univention-run-join-scripts</command> or doing so through <acronym>UMC</acronym>.
		</para>

	</section>

	<section id="join:write">
		<title>Writing join scripts
			<indexterm><primary>Join script</primary><secondary>Writing</secondary></indexterm>
		</title>

		<para>
			Similar to the Debian maintainer scripts (see <xref linkend="deb:scripts"/>) they should be idem-potent:
			They should transform the system from any state into the state required by the package, that is:
		</para>
		<itemizedlist>
			<listitem>
				<simpara>They should create newly introduced objects in the Univention directory service</simpara>
			</listitem>
			<listitem>
				<simpara>They should not fail if the object already exists</simpara>
			</listitem>
			<listitem>
				<simpara>They should be careful about modifying objects, which might have been modified by the administrator in the past</simpara>
			</listitem>
		</itemizedlist>
		<para>
			Join scripts may be called from multiple system roles and different versions.
			Therefore it is important that these scripts <emphasis>do not destroy or remove data still used by other systems!</emphasis>
		</para>

		<section id="join:minimal">
			<title>Basic join script example</title>
			<para>
				This example provides a template for writing join scripts.
				The package is called <package>join-template</package> and just contains a join and an unjoin script.
				They demonstrate some commonly used functions.
			</para>
			<para>
				Source code: <u:src>doc/developer-reference/join/join-template/</u:src>
			</para>
			<variablelist>
				<varlistentry>
					<term><filename>50join-template.inst</filename></term>
					<listitem>
						<para>
							The join script in UCS packages is typically located in the package root directory.
							It has the following base structure:
						</para>
						<programlisting language="sh"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="join-template/50join-template.inst" parse="text"/></programlisting>
						<para>
							Please note the essential argument <option>"$@"</option> when <command>udm</command> is invoked, which passes on the required <acronym>LDAP</acronym> credentials described in <xref linkend="join:secret"/>.
							Since <u:erratum release='4.3-0'>85</u:erratum> credentials can also be passed via a file to prevent the password from being visible from the process tree.
							To enable this API one of the following comments must be placed inside the join script:
						</para>
						<variablelist>
							<varlistentry>
								<term><literal>## joinscript api: bindpwdfile</literal></term>
								<listitem>
									<simpara>
										This instructs <command>univention-join</command> and <command>univention-run-join-script</command> to pass the credential password via a file.
										The name of the file is passed via the parameter <option>--bindpwdfile <replaceable>path</replaceable></option>.
										The old parameter <option>--bindpwd <replaceable>secret</replaceable></option> will not be supplied in this case.
									</simpara>
								</listitem>
							</varlistentry>
							<varlistentry>
								<term><literal>## joinscript api: nocredentials</literal></term>
								<listitem>
									<simpara>
										This instructs <command>univention-join</command> and <command>univention-run-join-script</command> to not pass the credentials via the <option>--bind<replaceable>*</replaceable></option> parameters at all.
										Instead the script may retrieve the credentials from the two files named <filename>/var/run/univention-join/binddn</filename> and <filename>/var/run/univention-join/bindpwd</filename>.
										They exist only while <command>univention-join</command> or <command>univention-run-join-script</command> are running.
									</simpara>
								</listitem>
							</varlistentry>
						</variablelist>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><filename>debian/control</filename></term>
					<listitem>
						<para>
							The package uses two shell libraries, which are described in more detail in <xref linkend="join:libraries"/>.
							Both packages providing them must be added as additional runtime dependencies.
						</para>
						<para>
							The package needs to add <package>univention-join-dev</package> as build dependency.
						</para>
						<programlisting language="debcontrol"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="join-template/debian/control" parse="text"/></programlisting>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><filename>debian/rules</filename></term>
					<listitem>
						<para>
							During package build time <command>dh-univention-join-install</command> needs to be called.
							This should be done using the sequence <literal>univention-join</literal> in <filename>debian/rules</filename>:
						</para>
						<programlisting language="debcontrol"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="join-template/debian/rules" parse="text"/></programlisting>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>

		<section id="join:exitcode">
			<title>Join script exit codes
				<indexterm><primary>Join script</primary><secondary>Exit codes</secondary></indexterm>
				<indexterm><primary>Join script</primary><secondary>Return codes</secondary><see>Exit codes</see></indexterm>
			</title>
			<para>
				Join scripts must return the following exit codes:
			</para>
			<variablelist>
				<varlistentry>
					<term><literal>0</literal></term>
					<listitem>
						<para>
							The join script was successful and completed all tasks to join the software package on the system into the domain.
							All required entries in the Univention directory service were created or do already exist as expected.
						</para>
						<para>
							The script will be marked as successfully run.
							As a consequence the join script will not be called again in this version.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>1</literal></term>
					<listitem>
						<para>
							The script did not complete and some task to fully join the system into the domain are still pending.
							Some entries could not be created in <acronym>LDAP</acronym> or exist in a state, which is incompatible with this version of the package.
						</para>
						<para>
							The script needs to be run again after fixing the problem, either manually or automatically.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>2</literal></term>
					<listitem>
						<para>
							Some internal functions were called incorrectly.
							For example the credentials were wrong.
						</para>
						<para>
							The script needs to be run again.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>

		<section id="join:libraries">
			<title>Join script libraries
				<indexterm><primary>Join script</primary><secondary>Library</secondary></indexterm>
				<indexterm><primary>Join script</primary><secondary>Helpers</secondary><see>Library</see></indexterm>
			</title>
			<para>
				There exist two shell libraries, which provide functions which help in writing join scripts:
			</para>

			<section id="join:libraries:join">
				<title><package>univention-join</package></title>

				<para>
					The package contains the shell library <filename>/usr/share/univention-join/joinscripthelper.lib</filename>.
					It provides functions related to updating the join status file.
				</para>
				<variablelist>
					<varlistentry>
						<term><cmdsynopsis><command>joinscript_init</command></cmdsynopsis></term>
						<listitem>
							<para>
								This function parses the status file and exits the shell script, if a record is found with a version greater or equal to value of the environment variable <envar>VERSION</envar>.
								The name of the join script is derived from <envar>$0</envar>.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><cmdsynopsis><command>joinscript_save_current_version</command></cmdsynopsis></term>
						<listitem>
							<para>
								This function appends a new record to the end of the status file using the version number stored in the environment variable <envar>VERSION</envar>.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><cmdsynopsis><command>joinscript_check_any_version_executed</command></cmdsynopsis></term>
						<listitem>
							<para>
								This function returns success (<literal>0</literal>), if any previous version of the join scripts was successfully executed.
								Otherwise it returns a failure (<literal>1</literal>).
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><cmdsynopsis>
								<command>joinscript_check_specific_version_executed</command>
								<arg choice="plain">version</arg>
						</cmdsynopsis></term>
						<listitem>
							<para>
								This function returns success (<literal>0</literal>), if the specified version <option>version</option> of the join scripts was successfully executed.
								Otherwise it returns a failure (<literal>1</literal>).
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><cmdsynopsis>
								<command>joinscript_check_version_in_range_executed</command>
								<arg choice="plain">min</arg>
								<arg choice="plain">max</arg>
						</cmdsynopsis></term>
						<listitem>
							<para>
								This function returns success (<literal>0</literal>), if any successfully run version of the join script falls within the range <option>min</option>..<option>max</option>, inclusively.
								Otherwise it returns a failure (<literal>1</literal>).
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><cmdsynopsis>
								<command>joinscript_extern_init</command>
								<arg choice="plain">join-script</arg>
						</cmdsynopsis></term>
						<listitem>
							<para>
								The check commands mentioned above can also be used in other shell programs, which are not join scripts.
								There the name of the join script to be checked must be explicitly given.
								Instead of calling <command>joinscript_init</command>, this function requires an additional argument specifying the name of the <option>join-script</option>.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><cmdsynopsis>
								<command>joinscript_remove_script_from_status_file</command>
								<arg choice="plain">name</arg>
						</cmdsynopsis></term>
						<listitem>
							<para>
								Removes the given join script from the join script status file <filename>/var/univention-join/status</filename>.
								The <option>name</option> should be the basename of the joinscript without the prefixed digits and the suffix <filename class="extension">.inst</filename>.
								So if the joinscript <filename>/var/lib/univention-install/50join-template.inst</filename> shall be removed, one has to execute <command>joinscript_remove_script_from_status_file join-template</command>.
								Primarily used in unjoin scripts.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><cmdsynopsis>
								<command>die</command>
						</cmdsynopsis></term>
						<listitem>
							<para>
								A convenience function to exit the join script with an error code.
								Used to guarantee that <acronym>LDAP</acronym> modifications were successful:
								<command>some_udm_create_call || die</command>
							</para>
						</listitem>
					</varlistentry>
				</variablelist>
				<para>
					These functions use the following environment variables:
				</para>
				<variablelist>
					<varlistentry>
						<term><envar>VERSION</envar></term>
						<listitem>
							<para>
								This variable must be set before <command>joinscript_init</command> is invoked.
								It specifies the version number of the join script and is used twice:
							</para>
							<orderedlist>
								<listitem>
									<simpara>
										It defines the current version of the join script.
									</simpara>
								</listitem>
								<listitem>
									<simpara>
										If that version is already recorded in the status file, the join script qualifies as having been run successfully and the re-execution is prevented.
										Otherwise the join status is incomplete and the script needs to be invoked again.
									</simpara>
								</listitem>
							</orderedlist>
							<para>
								The version number should be incremented for a new version of the package, when the join script needs to perform additional modifications in LDAP compared to any previous packaged version.
							</para>
							<para>
								The version number must be a positive integer.
								The variable assignment in the join script must be on its own line.
								It may optionally quote the version number with single quotes (<literal>'</literal>) or double quotes (<literal>"</literal>).
								The following assignment are valid:
							</para>
							<programlisting language="sh"><![CDATA[
VERSION=1
VERSION='2'
VERSION="3"
							]]></programlisting>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><envar>JS_LAST_EXECUTED_VERSION</envar></term>
						<listitem>
							<para>
								This variable is initialized by <command>joinscript_init</command> with the latest version found in the join status file.
								If no version of the join script was ever executed and thus no record exists, the variable is set to <literal>0</literal>.
								The join script can use this information to decide what to do on an upgrade.
							</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>

			<section id="join:libraries:shell">
				<title><package>shell-univention-lib</package></title>
				<para>
					The package contains the shell library <filename>/usr/share/univention-lib/base.sh</filename>.
					Since package version <literal>&gt;= 2.0.17-1</literal> it provides the following functions:
				</para>
				<variablelist>
					<varlistentry>
						<term><cmdsynopsis>
								<command>call_joinscript</command>
								<arg choice="opt">--binddn <replaceable>bind-dn</replaceable> <group choice="req"><arg>--bindpwd <replaceable>bind-password</replaceable></arg><arg>--bindpwdfile <replaceable>filename</replaceable></arg></group></arg>
								<arg><replaceable>XXjoin-script.inst</replaceable></arg>
						</cmdsynopsis></term>
						<listitem>
							<simpara>
								This calls the join script called <filename>XXjoin-script.inst</filename> from the directory <filename class="directory">/usr/lib/univention-install/</filename>.
								The optional LDAP credentials <option>bind-dn</option> and <option>bind-password</option> respective <option>filename</option> are passed on as-is.
							</simpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><cmdsynopsis>
								<command>call_joinscript_on_dcmaster</command>
								<arg choice="opt">--binddn <replaceable>bind-dn</replaceable> <group choice="req"><arg>--bindpwd <replaceable>bind-password</replaceable></arg><arg>--bindpwdfile <replaceable>filename</replaceable></arg></group></arg>
								<arg><replaceable>XXjoin-script.inst</replaceable></arg>
						</cmdsynopsis></term>
						<listitem>
							<simpara>
								Similar to <command>call_joinscript</command>, but also checks the system role and only executes the script on the &ucsMaster;.
							</simpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><cmdsynopsis>
								<command>remove_joinscript_status</command>
								<arg><replaceable>name</replaceable></arg>
						</cmdsynopsis></term>
						<listitem>
							<simpara>
								Removes the given join script <option>name</option> from the join script status file <filename>/var/univention-join/status</filename>.
								Note that this command does the same as <command>joinscript_remove_script_from_status_file</command> provided by
								<package>univention-join</package> (see <xref linkend="join:libraries:join"/>).
							</simpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><cmdsynopsis>
								<command>call_unjoinscript</command>
								<arg choice="opt">--binddn <replaceable>bind-dn</replaceable> <group choice="req"><arg>--bindpwd <replaceable>bind-password</replaceable></arg><arg>--bindpwdfile <replaceable>filename</replaceable></arg></group></arg>
								<arg><replaceable>XXunjoin-script.uinst</replaceable></arg>
						</cmdsynopsis></term>
						<listitem>
							<simpara>
								Calls the given unjoin script <option>unjoin-script</option> on master and &ucsBackup; systems.
								The file name must be relative to the directory <filename class="directory">/usr/lib/univention-install/</filename>.
								The optional LDAP credentials <option>bind-dn</option> and <option>bind-password</option> respective <option>filename</option> are passed on as-is.
								Afterwards the unjoin script is automatically deleted.
							</simpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><cmdsynopsis>
								<command>delete_unjoinscript</command>
								<arg><replaceable>XXunjoin-script.uinst</replaceable></arg>
						</cmdsynopsis></term>
						<listitem>
							<simpara>
								Deletes the given unjoin script <option>XXunjoin-script.uinst</option> if it does not belong to any package.
								The file name must be relative to the directory <filename class="directory">/usr/lib/univention-install/</filename>.
							</simpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><cmdsynopsis>
								<command>stop_udm_cli_server</command>
						</cmdsynopsis></term>
						<listitem>
							<simpara>
								When <command>univention-directory-manager</command> is used the first time a server is started automatically that caches some information about the available modules.
								When changing some of this information (e.g. when adding or removing extended attributes) the server should be stopped manually.
							</simpara>
						</listitem>
					</varlistentry>
				</variablelist>
				<para>
					The package also contains the shell library <filename>/usr/share/univention-lib/ldap.sh</filename>.
					It provides convenience functions to query the Univention directory service and modify objects.
					For (un)join scripts the following functions might be important:
				</para>
				<variablelist>
					<varlistentry>
						<term><cmdsynopsis>
								<command>ucs_addServiceToLocalhost</command>
								<arg choice="plain"><replaceable>servicename</replaceable></arg>
								<arg choice="opt">--binddn <replaceable>bind-dn</replaceable> <group choice="req"><arg>--bindpwd <replaceable>bind-password</replaceable></arg><arg>--bindpwdfile <replaceable>filename</replaceable></arg></group></arg>
						</cmdsynopsis></term>
						<listitem>
							<para>
								Registers the additional service <option>servicename</option> in the LDAP object representing the local host.
								The optional LDAP credentials <option>bind-dn</option> and <option>bind-password</option> respective <option>filename</option> are passed on as-is.
							</para>
							<example id="join:addService">
								<title>Service registration in join script</title>
							<programlisting language="sh">
ucs_addServiceToLocalhost "MyService" "$@"
							</programlisting>
							</example>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><cmdsynopsis>
								<command>ucs_removeServiceFromLocalhost</command>
								<arg choice="plain"><replaceable>servicename</replaceable></arg>
								<arg choice="opt">--binddn <replaceable>bind-dn</replaceable> <group choice="req"><arg>--bindpwd <replaceable>bind-password</replaceable></arg><arg>--bindpwdfile <replaceable>filename</replaceable></arg></group></arg>
						</cmdsynopsis></term>
						<listitem>
							<para>
								Removes the service <option>servicename</option> from the LDAP object representing the local host, effectively reverting an <command>ucs_addServiceToLocalhost</command> call.
								The optional LDAP credentials <option>bind-dn</option> and <option>bind-password</option> respective <option>filename</option> are passed on as-is.
							</para>
							<example id="join:removeService">
								<title>Service unregistration in unjoin script</title>
							<programlisting language="sh">
ucs_removeServiceFromLocalhost "MyService" "$@"
							</programlisting>
							</example>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><cmdsynopsis>
								<command>ucs_isServiceUnused</command>
								<arg choice="plain"><replaceable>servicename</replaceable></arg>
								<arg choice="opt">--binddn <replaceable>bind-dn</replaceable> <group choice="req"><arg>--bindpwd <replaceable>bind-password</replaceable></arg><arg>--bindpwdfile <replaceable>filename</replaceable></arg></group></arg>
						</cmdsynopsis></term>
						<listitem>
							<para>
								Returns <literal>0</literal> if no LDAP host object exists where the service <option>servicename</option> is registered with.
							</para>
							<example id="join:unusedService">
								<title>Check for unused service in unjoin script</title>
							<programlisting language="sh">
if ucs_isServiceUnused "MyService" "$@"
then
	uninstall_my_service
fi
							</programlisting>
							</example>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><cmdsynopsis>
								<command>ucs_registerLDAPExtension</command>
								<arg choice="opt">--binddn <replaceable>bind-dn</replaceable>
									<group choice="req">
										<arg choice="plain">--bindpwd <replaceable>bind-password</replaceable></arg>
										<arg choice="plain">--bindpwdfile <replaceable>filename</replaceable></arg>
								</group></arg>
								<sbr/>
								<group choice="req">
									<group choice="req" rep="repeat">
										<arg choice="plain">--schema <replaceable>filename</replaceable></arg>
										<arg choice="plain">--acl <replaceable>filename</replaceable></arg>
										<arg choice="plain">--udm_syntax <replaceable>filename</replaceable></arg>
										<arg choice="plain">--udm_hook <replaceable>filename</replaceable></arg>
									</group>
									<sbr/>
									<arg choice="plain">--udm_module <replaceable>filename</replaceable>
										<arg choice="opt" rep="repeat">--messagecatalog <replaceable>filename</replaceable></arg>
										<arg choice="opt">--umcregistration <replaceable>filename</replaceable></arg>
										<arg choice="opt" rep="repeat">--icon <replaceable>filename</replaceable></arg>
									</arg>
								</group>
								<sbr/>
								<arg choice="opt">--packagename <replaceable>packagename</replaceable></arg>
								<arg choice="opt">--packageversion <replaceable>packageversion</replaceable></arg>
								<arg choice="opt">--name <replaceable>objectname</replaceable></arg>
								<arg choice="opt">--ucsversionstart <replaceable>ucsversion</replaceable></arg>
								<arg choice="opt">--ucsversionend <replaceable>ucsversion</replaceable></arg>
						</cmdsynopsis></term>
						<listitem>
							<para>
								The shell function <command>ucs_registerLDAPExtension</command> from the Univention shell function library (see <xref linkend="misc:lib"/>) can be used to register several extension in <acronym>LDAP</acronym>.
								This shell function offers several modes:
							</para>
							<variablelist>
								<varlistentry>
									<term>
										<option>--schema</option> <filename><replaceable>filename</replaceable>.schema</filename>
										<indexterm><primary>LDAP</primary><secondary>Schema extension</secondary></indexterm>
									</term>
									<listitem><simpara>Register one or more <acronym>LDAP</acronym> schema extension (see <xref linkend="settings:ldapschema"/>)</simpara></listitem>
								</varlistentry>
								<varlistentry>
									<term>
										<option>--acl</option> <filename><replaceable>filename</replaceable>.acl</filename>
										<indexterm><primary>LDAP</primary><secondary>Access control list extension</secondary></indexterm>
									</term>
									<listitem><simpara>Register one or more <acronym>LDAP</acronym> access control list (see <xref linkend="settings:ldapacl"/>)</simpara></listitem>
								</varlistentry>
								<varlistentry>
									<term>
										<option>--udm_syntax</option> <filename><replaceable>filename</replaceable>.py</filename>
										<indexterm><primary>Directory Manager</primary><secondary>Syntax extension</secondary></indexterm>
									</term>
									<listitem><simpara>Register one or more <acronym>UDM</acronym> syntax extension (see <xref linkend="udm:syntax"/>)</simpara></listitem>
								</varlistentry>
								<varlistentry>
									<term>
										<option>--udm_hook</option> <filename><replaceable>filename</replaceable>.py</filename>
										<indexterm><primary>Directory Manager</primary><secondary>Hook extension</secondary></indexterm>
									</term>
									<listitem><simpara>Register one or more <acronym>UDM</acronym> hook (see <xref linkend="udm:hook"/>)</simpara></listitem>
								</varlistentry>
								<varlistentry>
									<term>
										<option>--udm_module</option> <filename><replaceable>filename</replaceable>.py</filename>
										<indexterm><primary>Directory Manager</primary><secondary>Module extension</secondary></indexterm>
									</term>
									<listitem><simpara>Register a single <acronym>UDM</acronym> module (see <xref linkend="udm:modules"/>)</simpara></listitem>
								</varlistentry>
							</variablelist>
							<para>
								The modes can be combined.
								If more than one mode is used in one call of the function, the modes are always processed in the order as listed above.
								Each of these options expects a filename as an required argument.
							</para>
							<para>
								It is possible to register different extensions to different UCS versions:
							</para>
							<variablelist>
								<varlistentry>
									<term><option>--name</option> <replaceable>name</replaceable></term>
									<listitem>
										<simpara>
											The option can be used to supply an object name to be used to store the extension. If not set <filename><replaceable>filename</replaceable></filename> will be used.
												If combined with <option>--udm_module</option> the name must include a forward slash.
										</simpara>
									</listitem>
								</varlistentry>
								<varlistentry>
									<term><option>--ucsversionstart</option> <replaceable>ucsversion</replaceable></term>
									<listitem>
										<simpara>
											The option can be used to supply the earliest version of UCS to which the <acronym>UDM</acronym> extension should be deployed.
										</simpara>
									</listitem>
								</varlistentry>
								<varlistentry>
									<term><option>--ucsversionend</option> <replaceable>ucsversion</replaceable></term>
									<listitem>
										<simpara>
											The option can be used to supply the last version of UCS to which the <acronym>UDM</acronym> extension should be deployed.
											Together with <option>--ucsversionstart</option> and <option>--name</option>, it is possible to deploy different versions of a <acronym>UDM</acronym> extension.
										</simpara>
									</listitem>
								</varlistentry>
							</variablelist>
							<para>
								The following options can be given multiple times, but only after the option <option>--udm_module</option>:
							</para>
							<variablelist>
								<varlistentry>
									<term><option>--messagecatalog</option> <filename><replaceable>prefix</replaceable>/<replaceable>language</replaceable>.mo</filename></term>
									<listitem>
										<para>
											The option can be used to supply message translation files in GNU message catalog format.
											The language must be a valid language tag, i.e. must correspond to a subdirectory of <filename class="directory">/usr/share/locale/</filename>.
										</para>
									</listitem>
								</varlistentry>
								<varlistentry>
									<term><option>--umcregistration</option> <filename><replaceable>filename</replaceable>.xml</filename></term>
									<listitem>
										<para>
											The option can be used to supply an UMC registration file (see <xref linkend="umc:xml"/>) to make the UDM module accessible via Univention Management Console (UMC).
										</para>
									</listitem>
								</varlistentry>
								<varlistentry>
									<term><option>--icon</option> <filename><replaceable>filename</replaceable></filename></term>
									<listitem>
										<para>
											The option can be used to supply icon files (<filename class="extension">png</filename> or <filename class="extension">jpeg</filename>, in 16×16 or 50×50, or <filename class="extension">svgz</filename>).
										</para>
									</listitem>
								</varlistentry>
							</variablelist>
							<note>
								<para>
									<acronym>UDM</acronym> extensions will only be deployed to UCS 5 if either <option>--ucsversionstart</option> or <option>--ucsversionend</option> are set.
								</para>
							</note>

							<para>
								Called from a joinscript, the function automatically determines some required parameters, like the app identifier plus Debian package name and version,
								required for the creation of the corresponding object. After creation of the object the function waits
								up to 3 minutes for the &ucsMaster; to signal availability of the new extension and reports success or failure.
								For UDM extensions it additionally checks that the corresponding file has been made available in the local filesystem.
								Failure conditions may occur e.g. in case the new <acronym>LDAP</acronym> schema extension collides with the schema currently active.
								The &ucsMaster; only activates a new <acronym>LDAP</acronym> schema or ACL extension if the configuration check succeeded.
							</para>
							<note>
								<para>
									The corresponding UDM modules are documented in <xref linkend="chap:ldap"/> and <xref linkend="chap:udm"/>.
								</para>
							</note>
							<para>
								Before calling the shell function the shell variable <envar>UNIVENTION_APP_IDENTIFIER</envar> should be set
								to the versioned app identifier (and exported to the environment of subprocesses).
								The shell function will then register the specified app identifier with the extension object to indicate that
								the extension object is required as long as this app is installed anywhere in the UCS domain.
							</para>
							<para>
								The options <option>--packagename</option> and <option>--packageversion</option> should usually not be used, as these parameters
								are determined automatically.
								To prevent accidental downgrades the function <command>ucs_registerLDAPExtension</command> (as well as the corresponding UDM module)
								only execute modifications of an existing object if the Debian package version is not older than the previous one.
							</para>
							<para>
								<command>ucs_registerLDAPExtension</command> supports two additional options to specify a valid range of UCS versions, where an extension should be
								activated. The options are <option>--ucsversionstart</option> and <option>--ucsversionend</option>. The version check is only
								performed whenever the extension object is modified. By calling this function from a joinscript, it will
								automatically update the Debian package version number stored in the object, triggering a re-evaluation of the specified UCS version range.
								The extension is activated up to and excluding the UCS version specified by <option>--ucsversionend</option>.
								This validity range is not applied to <acronym>LDAP</acronym> schema extensions, since they must not be undefined as long as there are objects
								in the <acronym>LDAP</acronym> directory which make use of it.
							</para>

							<example id="join:registerExtensions">
								<title>Extension registration in join script</title>
							<programlisting language="sh">
export UNIVENTION_APP_IDENTIFIER="appID-appVersion"	## example
. /usr/share/univention-lib/ldap.sh

ucs_registerLDAPExtension "$@" \
  --schema /path/to/appschemaextension.schema \
  --acl /path/to/appaclextension.acl \
  --udm_syntax /path/to/appudmsyntax.py

ucs_registerLDAPExtension "$@" \
  --udm_module /path/to/appudmmodule.py \
  --messagecatalog /path/to/de.mo \
  --messagecatalog /path/to/eo.mo \
  --umcregistration /path/to/module-object.xml \
  --icon /path/to/moduleicon16x16.png \
  --icon /path/to/moduleicon50x50.png
							</programlisting>
							</example>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><cmdsynopsis>
								<command>ucs_unregisterLDAPExtension</command>
								<arg choice="opt">--binddn <replaceable>bind-dn</replaceable>
									<group choice="req">
										<arg choice="plain">--bindpwd <replaceable>bind-password</replaceable></arg>
										<arg choice="plain">--bindpwdfile <replaceable>filename</replaceable></arg>
								</group></arg>
								<sbr/>
								<group choice="req" rep="repeat">
									<arg choice="plain">--schema <replaceable>objectname</replaceable></arg>
									<arg choice="plain">--acl <replaceable>objectname</replaceable></arg>
									<arg choice="plain">--udm_syntax <replaceable>objectname</replaceable></arg>
									<arg choice="plain">--udm_hook <replaceable>objectname</replaceable></arg>
									<arg choice="plain">--udm_module <replaceable>objectname</replaceable></arg>
								</group>
						</cmdsynopsis></term>
						<listitem>
							<para>
								There is a corresponding <command>ucs_unregisterLDAPExtension</command> function, which can be used to unregister extension objects. This only works if no App is registered any longer for the object. It must not be called unless it has been verified that no object in <acronym>LDAP</acronym>  still requires this schema extension. For this reason it should generally not be called in unjoin scripts.
							</para>
							<example id="join:unregisterExtensions">
								<title>Schema unregistration in unjoin script</title>
							<programlisting language="sh">
. /usr/share/univention-lib/ldap.sh
ucs_unregisterLDAPExtension "$@" --schema appschemaextension
							</programlisting>
							</example>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>

		</section>
	</section>

	<section id="join:unjoin">
		<title>Writing unjoin scripts</title>
		<para>
			On package removal packages should clean up the data in Univention directory service.
			Removing data from LDAP also requires appropriate credentials, while removing a package only requires local <literal>root</literal> privileges.
			Therefore UCS provides support for so-called <firstterm>unjoin scripts</firstterm>.
			In most cases it reverts the changes of a corresponding join script.
		</para>
		<warning>
			<para>
				A domain is a distributed system.
				Just because one local system no longer wants to store some information in Univention directory service does not mean that the data should be deleted.
				There might still be other systems in the domain which still require the data.
			</para>
			<para>
				Therefore <quote>the first system to come</quote> should setup the data, while only <quote>the last system to go</quote> may clean up the data.
			</para>
		</warning>
		<para>
			Just like join scripts an unjoin script is prefixed with a two-digit number for lexicographical ordering.
			To reverse the order of the unjoin scripts in comparison to the corresponding join scripts, the number of the unjoin script should be 100 minus the number of the corresponding join script.
			The suffix of an unjoin script is <literal>-uninstall.uinst</literal> and it should be installed in <filename class="directory">/usr/lib/univention-uninstall/</filename>.
		</para>
		<para>
			On package removal the unjoin script would be deleted as well, while the Univention directory service might still contain data managed by the package.
			Therefore the script must be copied from there to <filename class="directory">/usr/lib/univention-install/</filename> in the <filename>prerm</filename> maintainer script.
		</para>
		<para>
			Example:
			The package <package>univention-fetchmail</package> provides both a join script <filename>/usr/lib/univention-install/91univention-fetchmail.inst</filename> and the corresponding unjoin script as <filename>/usr/lib/univention-uninstall/09univention-fetchmail-uninstall.uinst</filename>.
		</para>
		<para>
			As of UCS 3.1 <filename class="extension">.inst</filename> and <filename class="extension">.uinst</filename> are not distinguishable in the <emphasis>UMC Join module</emphasis> by the user.
			Therefore it is important to use the <literal>-uninstall</literal> suffix to give users a visual hint.
			Internally join scripts are always executed before unjoin scripts and then ordered lexicographically by their prefix.
		</para>
		<para>
			To decide if an unjoin script is the last instance and should remove the data from <acronym>LDAP</acronym>, a service can be registered for each host where the package is installed.
		</para>
		<para>
			For example the package <package>univention-fetchmail</package> uses <command>ucs_addServiceFromLocalhost "Fetchmail" "$@"</command> in the join script to register and <command>ucs_removeServiceFromLocalhost "Fetchmail" "$@"</command> in the unjoin script to unregister a service for the host.
			The data is removed from <acronym>LDAP</acronym> when in the unjoin script <command>ucs_isServiceUnused "Fetchmail" "$@"</command> returns 0.
			As a side effect adding the service also allows using this information to find and list those servers currently providing the Fetchmail service.
		</para>
		<variablelist>
			<varlistentry>
				<term><filename>50join-template-uninstall.uinst</filename></term>
				<listitem>
					<para>
						This unjoin script reverts the changes of the join script from <xref linkend="join:minimal"/>.
					</para>
					<programlisting language="sh"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="join-template/50join-template-uninstall.uinst" parse="text"/></programlisting>
				</listitem>
			</varlistentry>
		</variablelist>
	</section>


</chapter>
<!-- vim:set ts=2 sw=2 noet ft=docbk:-->
