@%@UCRWARNING=# @%@

ProxyPreserveHost on
RewriteEngine On

# avoid 404 Not Found errors for not existing translation files
RewriteCond %{REQUEST_URI} ^/univention/js/.*/i18n/[^/]*/.*\.json [OR]
RewriteCond %{REQUEST_URI} ^/univention/management/modules/i18n/[^/]*/.*\.json [OR]
RewriteCond %{REQUEST_URI} ^/univention/i18n/[^/]*/.*\.json [OR]
RewriteCond %{REQUEST_URI} ^/univention/(management|portal|login|server-overview|self-service|setup)/i18n/[^/]*/.*\.json
RewriteCond %{DOCUMENT_ROOT}%{REQUEST_FILENAME} !-f
RewriteCond %{DOCUMENT_ROOT}%{REQUEST_FILENAME} !-d
RewriteRule .* /univention/management/widgets/i18n/empty.json [T=application/json,L]

# prevent to proxy requests under /univention/ to the UMC-Webserver if the request URI matches a existing file
SetEnvIfExpr "'%{REQUEST_URI}' =~ m#^/univention/# && '%{REQUEST_URI}' !~ m#^/univention/udm/?$# && (-f '%{DOCUMENT_ROOT}%{REQUEST_URI}' || -d '%{DOCUMENT_ROOT}%{REQUEST_URI}')" "no-proxy=1"

@!@
# prevent to use UMC when in maintenance mode
if configRegistry.is_true('updater/maintenance'):
	print('SetEnvIf Request_URI "^/univention/(login|management)(/.*|$)$" MAINTENANCEMODE=1')
	print('Header set X-UCS-Maintenance "true" env=MAINTENANCEMODE')

	print('RewriteCond %{REQUEST_URI} ^/univention/(login|management)(/.*|$)$')
	print(r'RewriteCond %{REQUEST_URI} !^/univention/(login|management)/.*(\.js|\.css|\.json)$')
	print('RewriteCond %{DOCUMENT_ROOT}%{REQUEST_FILENAME} -f [OR]')
	print('RewriteCond %{DOCUMENT_ROOT}%{REQUEST_FILENAME} -d')
	print('RewriteRule ^/univention/(.*)$ /var/www/univention/maintenance/index.html [END]')
@!@

<LocationMatch "^/univention/login/.*$">
@!@
piwik = 'https://www.piwik.univention.de/' if configRegistry.is_true('umc/web/piwik', True) else ''
maintenance = 'https://updates.software-univention.de https://fonts.googleapis.com' if configRegistry.is_true('updater/maintenance', False) else ''
config = dict(configRegistry.items())
config.setdefault('umc/login/content-security-policy/default-src', '')
config['umc/login/content-security-policy/default-src'] = ' '.join(("'self'", "'unsafe-inline'", "'unsafe-eval'", config['umc/login/content-security-policy/default-src'], piwik, maintenance))
csp = ''
for name in ('default-src', 'script-src', 'object-src', 'style-src', 'img-src', 'media-src', 'frame-src', 'font-src', 'connect-src', 'form-action', 'frame-ancestors'):
	key = 'umc/login/content-security-policy/%s' % (name,)
	if config.get(key):
		csp += '%s %s; ' % (name, config[key].replace('\\', '\\\\').replace('"', '\\"'))
if csp:
	print('\tHeader always setifempty "Content-Security-Policy" "%s"' % (csp.rstrip(),))
@!@
</LocationMatch>

<LocationMatch "^/univention/saml/">
@!@
csp = ''
for name in ('default-src', 'script-src', 'object-src', 'style-src', 'img-src', 'media-src', 'frame-src', 'font-src', 'connect-src', 'form-action', 'frame-ancestors'):
	key = 'umc/login/content-security-policy/%s' % (name,)
	if configRegistry.get(key):
		csp += '%s %s; ' % (name, configRegistry[key].replace('\\', '\\\\').replace('"', '\\"'))
if csp:
	print('\tHeader always setifempty "Content-Security-Policy" "%s"' % (csp.rstrip(),))
@!@
</LocationMatch>

<LocationMatch "^/univention/management/.*">
@!@
from collections import defaultdict
config = dict(configRegistry.items())
config.setdefault('umc/http/content-security-policy/script-src', '')
config.setdefault('umc/http/content-security-policy/img-src', '')
config.setdefault('umc/http/content-security-policy/connect-src', '')
config.setdefault('umc/http/content-security-policy/frame-ancestors', '')
if configRegistry.is_true('umc/web/piwik', True):
	config['umc/http/content-security-policy/script-src'] += ' https://www.piwik.univention.de/'
config['umc/http/content-security-policy/script-src'] += ' https://%(ucs/server/sso/fqdn)s/ http://%(ucs/server/sso/fqdn)s/' % defaultdict(lambda: '', configRegistry)
config['umc/http/content-security-policy/img-src'] = 'data: %s' % (config['umc/http/content-security-policy/img-src'],)
config['umc/http/content-security-policy/connect-src'] += ' https://%(ucs/server/sso/fqdn)s/ http://%(ucs/server/sso/fqdn)s/' % defaultdict(lambda: '', configRegistry)
config['umc/http/content-security-policy/frame-ancestors'] += ' https://%(ucs/server/sso/fqdn)s/ http://%(ucs/server/sso/fqdn)s/' % defaultdict(lambda: '', configRegistry)
csp = ''
for name in ('default-src', 'script-src', 'object-src', 'style-src', 'img-src', 'media-src', 'frame-src', 'font-src', 'connect-src', 'form-action', 'frame-ancestors'):
	key = 'umc/http/content-security-policy/%s' % (name,)
	if config.get(key):
		csp += '%s %s; ' % (name, config[key].replace('\\', '\\\\').replace('"', '\\"'))
print('\tHeader always setifempty "Content-Security-Policy" "%s"' % (csp,))
@!@
</LocationMatch>

<LocationMatch "^/univention/(.*)$">
	RequestHeader set X-UMC-HTTPS %{HTTPS}s
	ErrorDocument 503 "{\"status\": 503, \"message\": \"The Univention Management Console Web Server could not be reached. Please restart it or try again later.\"}"
	# fix for bug in cherrypy returning 408/409 errors out of the blue:
	#   http://cherrypy.org/ticket/853
	SetEnv proxy-nokeepalive 1
	Header always setifempty "X-Permitted-Cross-Domain-Policies" "master-only"
	Header always setifempty "X-XSS-Protection" "1; mode=block"
	Header always setifempty "X-Content-Type-Options" "nosniff"
	Header always setifempty "Content-Security-Policy" "frame-ancestors 'none';"
</LocationMatch>

# do not proxy forward certain requests
ProxyPassMatch "^/univention/js(/|_.*)" "!"
ProxyPassMatch /univention/management/modules/ "!"

@!@
port = int(configRegistry.get('umc/http/port', 8090))
interface = configRegistry.get('umc/http/interface', '127.0.0.1')

print('ProxyPassMatch "^/univention/((auth|saml|get|set|command|upload|logout)/?.*)$" http://%s:%s/$1 retry=0 timeout=%d' % (interface, port, int(configRegistry.get('umc/http/response-timeout', '310')) + 1))
print('ProxyPassReverse "^/univention/((auth|saml|get|set|command|upload|logout)/?.*)$" http://%s:%s/' % (interface, port))
@!@

RedirectMatch ^/umc(/$|$) /univention/management/
RewriteRule ^/univention-management-console(/|/index.html)?$ /univention/management/ [R]
