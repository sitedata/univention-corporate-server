#!/usr/share/ucs-test/runner python
## desc: Test update-certificates
## tags: [docker]
## exposure: dangerous
## packages:
##   - docker.io

import os
import sys
import stat

from dockertest import Appcenter, App, get_app_name

actions = ["install", "upgrade", "remove"]
# a log file to store the results (line based)...
file_result = "/tmp/69_app_install_update_remove_hooks.result"


def setup(app_name):
	"""
	the setup creates the necessary script hook folders and places a script in
	each of them with the filename being the action name. The script will
	append its own name to `file_result` when executed.
	"""

	# the path, where -by convention- script hooks have to be stored (app specific)
	hook_path = "/var/lib/univention-appcenter/apps/{appid}/local/hooks".format(
		appid=app_name)

	# the same script will be placed in all script hook folders, always named
	# after the action it is for.  It prints its filename into $result_file-
	# appends one line & that is the test condition.
	test_script = '#!/bin/sh' \
		'\n' '# This script prints the current date and its own name' \
		'\n' 'date -Is' \
		'\n' 'echo "$0" >> {file_result}'.format(file_result=file_result)
	#   ^ NOTE: ticks are intentional!

	for action in actions:

		script_hook_path = '{hook_path}/post-{action}.d'.format(
			hook_path=hook_path,
			action=action
		)

		script_hook_file = "{pathname}/{filename}".format(
			pathname=script_hook_path,
			filename=action
		)

		# create the hook directory only if it does not exist yet
		try:
			os.makedirs(script_hook_path, mode=0o777)
		except Exception:
			# we know well enough what went wrong and can savely ignore it. In
			# python3 however os.makedirs has an `exist_ok`-parameter which should
			# be used instead of this block.
			pass

		try:
			# create a script file in the hook directory...
			with open(script_hook_file, 'w') as f:
				f.write(test_script)

			# add the executable flag to the file permissions...
			os.chmod(
				script_hook_file,
				os.stat(script_hook_file).st_mode | stat.S_IEXEC)

		except Exception as e:
			print("Error with file '{filename}': {error}".format(
				error=e,
				filename=script_hook_file)
			)


def app_install(appcenter, app_name):
	# we have chosen alpine as DockerImage, because it is relatively small
	app = App(
		name=app_name,
		version='1',  # first version
		build_package=False,
		call_join_scripts=False)

	app.set_ini_parameter(
		DockerImage='alpine:3.6',  # initial docker image release
		DockerScriptSetup='/setup',
		DockerScriptInit='/sbin/init',
	)

	app.add_to_local_appcenter()
	appcenter.update()
	app.install()  # install the app
	app.verify(joined=False)


def app_upgrade(appcenter, app_name):
	app = App(
		name=app_name,
		version='2',  # next version
		build_package=False,
		call_join_scripts=False)

	app.set_ini_parameter(
		DockerImage='alpine:3.7',  # next image release
		DockerScriptSetup='/setup',
		DockerScriptInit='/sbin/init',
	)

	app.add_to_local_appcenter()
	appcenter.update()
	app.upgrade()  # now upgrade the app
	app.verify(joined=False)


def app_remove(appcenter, app_name):
	app = App(name=app_name)
	app.uninstall()
	app.remove()


def verify_test_results_and_exit():
	"""
	function outputs all test results and checks if the result file contains
	the names of all actions (install/upgrade/remove).
	"""

	try:
		with open(file_result, 'r') as f:

			# print the whole file to allow easier debugging
			print(f.read())

			# now check if all actions were executed and abort otherwise...
			for action in actions:
				assert(action in f)

			raise(SystemExit, 0)

	except Exception:
		print("Test FAILED! File not found: {filename}".format(
			filename=file_result))
		raise(SystemExit, 2)


if __name__ == '__main__':
	"""
	This test tests three hook directories: install, update and remove. Each of
	these actions should then execute its hook scripts and if that works a
	resulting log file contains their script file names.
	"""

	app_name = get_app_name()  # returns an arbitrary app
	setup(app_name)

	try:
		with Appcenter() as appcenter:
			app_install(appcenter, app_name)
			app_upgrade(appcenter, app_name)
			app_remove(appcenter, app_name)
	except Exception as e:
		print("Problem with this test: {error}".format(error=e))

	verify_test_results_and_exit()

# vim: ft=python
